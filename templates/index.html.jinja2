<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
            color: #333;
            line-height: 1.6;
        }

        .break-line {
            width: 90%;
            height: 1px;
            margin: 0 auto;
            background: linear-gradient(to left, transparent, #8a8a8a, transparent) center;
        }

        .header {
            color: #333;
            padding: 20px;
            text-align: center;
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .header h1 {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #2c3e50;
        }

        .header p {
            margin: 10px 0;
            font-size: 16px;
            color: #555;
        }

        .container {
            display: flex;
            justify-content: center;
            padding: 20px;
            gap: 20px;
        }

        .program-list-container {
            flex: 1;
            max-width: 800px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }

        .channel-list-container {
            flex: 0 0 220px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
            max-height: 80vh;
            overflow-y: auto;
            position: sticky;
            top: 20px;
            align-self: flex-start;
        }

        .program-list {
            width: 100%;
            border-collapse: collapse;
            line-height: 1.5;
        }

        .program-list th {
            display: none;
        }

        .program-item {
            transition: background-color 0.2s;
        }

        .program-item:hover {
            background-color: #f0f7ff !important;
        }

        .program-item:nth-child(odd) {
            background-color: #f9f9f9;
        }

        .program-item:nth-child(even) {
            background-color: #f0f0f0;
        }

        .program-item td:first-child {
            width: 70px;
            text-align: right;
            font-weight: bold;
            color: #007BFF;
            padding-right: 15px;
            vertical-align: top;
        }

        .program-item td {
            padding: 12px 10px;
            color: #333;
            border-bottom: 1px solid #e0e0e0;
        }

        .program-desc {
            display: block;
            font-size: 0.9em;
            color: #666;
            margin-top: 5px;
            line-height: 1.4;
        }

        .channel-list {
            text-align: left;
            user-select: none;
        }

        .channel-item {
            font-size: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 4px;
            transition: all 0.2s;
        }

        .channel-item:hover {
            background-color: #f0f7ff;
        }

        .selected {
            color: #007BFF;
            background-color: #e6f2ff;
            font-weight: bold;
        }

        .now-playing {
            color: #007BFF;
            font-weight: bold;
            position: relative;
            padding-left: 15px;
        }

        .now-playing::before {
            content: "‚ñ∂";
            position: absolute;
            left: 0;
            top: 1px;
            font-size: 0.8em;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        .cta-button {
            display: inline-flex;
            text-decoration: none;
            margin-left: 5px;
            padding: 2px 6px;
            border-radius: 4px;
            background-color: #f0f0f0;
            color: #555;
            transition: all 0.2s;
            cursor: pointer;
        }

        .cta-button:hover {
            background-color: #d9d9d9;
            /*color: white;*/
        }

        .url-input {
            position: absolute;
            left: -9999px;
        }

        .date-nav {
            text-align: center;
            margin-bottom: 20px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 6px;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .date-prev,
        .date-next {
            cursor: pointer;
            color: #007BFF;
            user-select: none;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 4px;
            transition: all 0.2s;
        }

        .date-prev:hover,
        .date-next:hover {
            background-color: #e6f2ff;
        }

        .date-now {
            margin: 0 15px;
            font-weight: bold;
            color: #2c3e50;
        }

        .link-container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin: 15px 0;
        }

        .link-container a {
            /*color: #007BFF;*/
            text-decoration: none;
            transition: color 0.2s;
        }

/*        .link-container a:hover {
            color: #0056b3;
            text-decoration: underline;
        }*/

        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                padding: 10px;
            }

            .program-list-container,
            .channel-list-container {
                max-width: 100%;
                width: 100%;
            }

            .channel-list-container {
                order: 1;
                margin-bottom: 20px;
                max-height: 300px;
                position: static;
            }

            .program-list-container {
                order: 2;
            }

            .header h1 {
                font-size: 28px;
            }

            .program-item td {
                padding: 10px 8px;
            }

            .program-item td:first-child {
                width: 60px;
                padding-right: 10px;
            }
        }

        .copy-success {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #52c41a;
            color: white;
            padding: 10px 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            animation: fadeInOut 2s ease-in-out;
            opacity: 0;
        }
    
        @keyframes fadeInOut {
            0% { opacity: 0; top: 10px; }
            20% { opacity: 1; top: 20px; }
            80% { opacity: 1; top: 20px; }
            100% { opacity: 0; top: 10px; }
        }

        /* Êñ∞Â¢ûÊêúÁ¥¢Ê°ÜÊ†∑Âºè */
        .channel-search-container {
            position: sticky;
            top: 0;
            background: white;
            padding: 10px 0;
            z-index: 10;
        }
        
        .channel-search-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
            margin-bottom: 5px;
            outline: none;
            transition: border-color 0.2s;
        }
        
        .channel-search-input:focus {
            border-color: #007BFF;
        }
        
        /* Êñ∞Â¢ûÈöêËóèÈ¢ëÈÅìÁöÑÊ†∑Âºè */
        .channel-item.hidden {
            display: none;
        }
    </style>
</head>

<body>
    <div class="header">
        <h1>{{ title }}</h1>
        <!-- <p>by {{ update_trigger }} </p> -->
        <div class="link-container">
            <a class="cta-button" id="copyEpgUrlButton">üìã TVXML</a>
            <a class="cta-button" id="copyDiypUrlButton">üìã DIYP</a>
            <a href="https://github.com/riverscn/epghub" class="cta-button" target="_blank" >üêô GitHub</a>
        </div>
        <p>{{ num_refresh_channels }}/{{ num_channels }} channels refreshed at {{ last_update_time }}</p>
        <p>Next update will be triggered at {{ next_update_time }}</p>
        

        <input type="text" value="/epg.xml" id="epgUrl" class="url-input" aria-label="URL" readonly />
        <input type="text" value="/diyp" id="diypUrl" class="url-input" aria-label="URL" readonly />
    </div>
    <div class="break-line"></div>
    <div class="container">
<div class="channel-list-container">
    <div class="channel-search-container">
        <input type="text" id="channelSearch" placeholder="ÊêúÁ¥¢È¢ëÈÅì..." class="channel-search-input">
    </div>
    <div class="channel-list">
        <div class="channel-item selected" data-channel="{{ first_channel }}">{{ first_channel }}</div>
        {% for channel in channel_list %}
        <div class="channel-item" data-channel="{{ channel }}">{{ channel }}</div>
        {% endfor %}
    </div>
    </div>
            <div class="program-list-container">
                <div class="date-nav">
                    <p>
                        <span class="date-prev" id="prevDate">&lt;&lt; Ââç‰∏ÄÂ§©</span>
                        <span class="date-now" id="currentDate">2023-10-10</span>
                        <span class="date-next" id="nextDate">Âêé‰∏ÄÂ§© &gt;&gt;</span>
                    </p>
                </div>
            <table class="program-list">
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script>
        // Function to refresh the program list for the selected channel and date
        function refreshProgramList(channelName, formattedDate) {
            const programList = document.querySelector('.program-list tbody');
            const currentDate = formattedDate;
            const apiUrl = `/diyp?ch=${encodeURIComponent(channelName)}&date=${currentDate}`;

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    programList.innerHTML = '';
                    currentTime = new Date();
                    currentTime = new Date(currentTime.toISOString());

                    if (data.epg_data) {
                        // Êñ∞Â¢ûÊéíÂ∫èÈÄªËæë - ÊåâÂºÄÂßãÊó∂Èó¥ÊéíÂ∫è
                        const sortedPrograms = data.epg_data.sort((a, b) => {
                            const timeA = new Date(`${currentDate}T${a.start}{{timezone_offset}}`).getTime();
                            const timeB = new Date(`${currentDate}T${b.start}{{timezone_offset}}`).getTime();
                            return timeA - timeB;
                        });

                        sortedPrograms.forEach((program, index) => {
                            const programItem = document.createElement('tr');
                            programItem.classList.add('program-item');

                            // Format program start and end times with '{{timezone_name}}' time zone
                            programStartTime = new Date(`${currentDate}T${program.start}{{timezone_offset}}`);
                            programEndTime = new Date(`${currentDate}T${program.end}{{timezone_offset}}`);
                            
                            if (programEndTime < programStartTime) {
                                programEndTime.setDate(programEndTime.getDate() + 1);
                            }

                            let programTitle = program.title;
                            let programDesc = '';
                            
                            if (program.desc) {
                                programDesc = `<span class="program-desc">${program.desc}</span>`;
                            }
                            
                            if (currentTime >= programStartTime && currentTime <= programEndTime) {
                                programTitle = `<span class="now-playing">${program.title}</span>${programDesc}`;
                            } else {
                                programTitle = `${program.title}${programDesc}`;
                            }

                            programItem.innerHTML = `<td>${program.start}</td><td>${programTitle}</td>`;
                            programList.appendChild(programItem);
                        });
                    } else {
                        const noDataItem = document.createElement('tr');
                        noDataItem.classList.add('program-item');
                        noDataItem.innerHTML = '<td colspan="2" style="text-align: center; padding: 20px;">No program data available.</td>';
                        programList.appendChild(noDataItem);
                    }
                })
                .catch(error => {
                    console.error(error);
                    const errorItem = document.createElement('tr');
                    errorItem.classList.add('program-item');
                    errorItem.innerHTML = '<td colspan="2" style="text-align: center; padding: 20px; color: #dc3545;">Failed to retrieve program data.</td>';
                    programList.appendChild(errorItem);
                });
        }

        const channelItems = document.querySelectorAll('.channel-item');

        channelItems.forEach(item => {
            item.addEventListener('click', () => {
                // Clear all selected items
                channelItems.forEach(item => item.classList.remove('selected'));

                // Toggle the selected state for the clicked item
                item.classList.add('selected');

                // Refresh the program list for the selected channel
                goBackToday();
            });
        });

        // Function to copy the URL to the clipboard
        function copyURLToClipboard(elID) {
            const urlInput = document.getElementById(elID);
            urlInput.select();
            document.execCommand('copy');
            
            // Create and show feedback element
            const feedback = document.createElement('div');
            feedback.className = 'copy-success';
            feedback.textContent = 'Â§çÂà∂ÊàêÂäü!';
            document.body.appendChild(feedback);
            
            // Remove feedback element after animation
            setTimeout(() => {
                document.body.removeChild(feedback);
            }, 2000);
        }

        // Attach a click event listener to the "Copy URL" button
        document.getElementById('copyEpgUrlButton').addEventListener('click', () => { copyURLToClipboard('epgUrl') });
        document.getElementById('copyDiypUrlButton').addEventListener('click', () => { copyURLToClipboard('diypUrl') });

        window.addEventListener('load', function () {
            // Get the href attribute value
            var hrefValueEpgUrl = document.getElementById('epgUrl').value;
            var hrefValueDiypUrl = document.getElementById('diypUrl').value;
            // Get the full URL including the base URL
            var fullUrlEpgUrl = window.location.origin + hrefValueEpgUrl;
            var fullUrlDiypUrl = window.location.origin + hrefValueDiypUrl;

            // Set the full URL in the input box
            document.getElementById('epgUrl').value = fullUrlEpgUrl;
            document.getElementById('diypUrl').value = fullUrlDiypUrl;
        });

        // Function to update the date display
        function updateDateDisplay(dateString) {
            const currentDateElement = document.getElementById('currentDate');
            currentDateElement.textContent = dateString;
        }

        // Function to handle the "Previous Date" button click
        function goToPreviousDate() {
            const currentDateElement = document.getElementById('currentDate');
            const currentDate = currentDateElement.textContent;
            const curDate = convertLocalTimeToTimezoneOffset(new Date(`${currentDate}`), "{{timezone_offset}}");
            curDate.setDate(curDate.getDate() - 1);
            const formattedDate = curDate.getFullYear() + '-' + String(curDate.getMonth() + 1).padStart(2, '0') + '-' + String(curDate.getDate()).padStart(2, '0');
            updateDateDisplay(formattedDate);
            const initiallySelectedChannel = document.querySelector('.channel-item.selected');
            refreshProgramList(initiallySelectedChannel.getAttribute('data-channel'), formattedDate);
        }

        // Function to handle the "Next Date" button click
        function goToNextDate() {
            const currentDateElement = document.getElementById('currentDate');
            const currentDate = currentDateElement.textContent;
            const curDate = convertLocalTimeToTimezoneOffset(new Date(`${currentDate}`), "{{timezone_offset}}");
            curDate.setDate(curDate.getDate() + 1);
            const formattedDate = curDate.getFullYear() + '-' + String(curDate.getMonth() + 1).padStart(2, '0') + '-' + String(curDate.getDate()).padStart(2, '0');
            updateDateDisplay(formattedDate);
            const initiallySelectedChannel = document.querySelector('.channel-item.selected');
            refreshProgramList(initiallySelectedChannel.getAttribute('data-channel'), formattedDate);
        }

        // Function to go back to today
        function goBackToday() {
            const currentDate = new Date();
            const epgTime = convertLocalTimeToTimezoneOffset(currentDate, "{{timezone_offset}}");
            const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const formattedDate = epgTime.toLocaleDateString('fr-CA', options);

            updateDateDisplay(formattedDate);
            const initiallySelectedChannel = document.querySelector('.channel-item.selected');
            refreshProgramList(initiallySelectedChannel.getAttribute('data-channel'), formattedDate);
        }

        // Function to convert local time to timezone offset
        function convertLocalTimeToTimezoneOffset(localTime, timezone_offset) {
            const sign = timezone_offset[0] === '-' ? -1 : 1;
            const hours = parseInt(timezone_offset.slice(1, 3), 10);
            const minutes = parseInt(timezone_offset.slice(3, 5), 10);

            const offsetMilliseconds = (hours * 60 + minutes) * 60 * 1000 * sign;
            const currentOffsetMilliseconds = localTime.getTimezoneOffset() * 60 * 1000;

            localTime.setTime(localTime.getTime() + currentOffsetMilliseconds + offsetMilliseconds);
            
            return localTime;
        }

        // Attach event listeners to the "Previous Date" and "Next Date" buttons
        const prevDateButton = document.getElementById('prevDate');
        prevDateButton.addEventListener('click', goToPreviousDate);

        const nextDateButton = document.getElementById('nextDate');
        nextDateButton.addEventListener('click', goToNextDate);

        // Refresh the program list for the initially selected channel
        goBackToday();

         // Êñ∞Â¢ûÂÆûÊó∂ÊêúÁ¥¢ÂäüËÉΩ
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('channelSearch');
            const channelItems = document.querySelectorAll('.channel-item');
            
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                
                channelItems.forEach(item => {
                    const channelName = item.textContent.toLowerCase();
                    if (channelName.includes(searchTerm)) {
                        item.classList.remove('hidden');
                    } else {
                        item.classList.add('hidden');
                    }
                });
            });
            
            // ‰øùÊåÅÊêúÁ¥¢Ê°ÜÂú®ÊªöÂä®Êó∂ÂèØËßÅ
            const channelListContainer = document.querySelector('.channel-list-container');
            channelListContainer.addEventListener('scroll', function() {
                const scrollTop = channelListContainer.scrollTop;
                const searchContainer = document.querySelector('.channel-search-container');
                searchContainer.style.boxShadow = scrollTop > 0 ? '0 2px 5px rgba(0,0,0,0.1)' : 'none';
            });
        });
    </script>
</body>

</html>